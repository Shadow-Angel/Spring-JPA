/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Client;
import java.util.List;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-06-02T02:01:10.506Z")

@Api(value = "client", description = "the client API")
public interface ClientApi {

    @ApiOperation(value = "Create client", nickname = "createClient", notes = "This can only be done by the logged in client.", tags={ "client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/client",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createClient(@ApiParam(value = "Created client object" ,required=true )  @Valid @RequestBody Client body);


    @ApiOperation(value = "Creates list of clients with given input array", nickname = "createClientsWithArrayInput", notes = "", tags={ "client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/client/createWithArray",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createClientsWithArrayInput(@ApiParam(value = "List of client object" ,required=true )  @Valid @RequestBody List<Client> body);


    @ApiOperation(value = "Creates list of clients with given input array", nickname = "createClientsWithListInput", notes = "", tags={ "client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/client/createWithList",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createClientsWithListInput(@ApiParam(value = "List of client object" ,required=true )  @Valid @RequestBody List<Client> body);


    @ApiOperation(value = "Delete user", nickname = "deleteClient", notes = "This can only be done by the logged in user.", tags={ "client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid clientname supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/client/{clientname}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteClient(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("clientname") String clientname);


    @ApiOperation(value = "Get user by client name", nickname = "getClientByName", notes = "", response = Client.class, tags={ "client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Client.class),
        @ApiResponse(code = 400, message = "Invalid clientname supplied"),
        @ApiResponse(code = 404, message = "Client not found") })
    @RequestMapping(value = "/client/{clientname}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Client> getClientByName(@ApiParam(value = "The name that needs to be fetched. Use client1 for testing.",required=true) @PathVariable("clientname") String clientname);


    @ApiOperation(value = "Logs user into the system", nickname = "loginClient", notes = "", response = String.class, tags={ "client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 400, message = "Invalid clientname/password supplied") })
    @RequestMapping(value = "/client/login",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> loginClient(@NotNull @ApiParam(value = "The client name for login", required = true) @Valid @RequestParam(value = "clientname", required = true) String clientname,@NotNull @ApiParam(value = "The password for login in clear text", required = true) @Valid @RequestParam(value = "password", required = true) String password);


    @ApiOperation(value = "Logs out current logged in client session", nickname = "logoutClient", notes = "", tags={ "client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/client/logout",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> logoutClient();


    @ApiOperation(value = "Updated client", nickname = "updateClient", notes = "This can only be done by the logged in client.", tags={ "client", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid user supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/client/{clientname}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateClient(@ApiParam(value = "name that need to be updated",required=true) @PathVariable("clientname") String clientname,@ApiParam(value = "Updated client object" ,required=true )  @Valid @RequestBody Client body);

}
